name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PROGRESSIVE_QUALITY_GATES: true

jobs:
  # Generation 1: MAKE IT WORK
  quality-gates-generation-1:
    runs-on: ubuntu-latest
    name: Quality Gates - Generation 1 (MAKE IT WORK)
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Progressive Quality Gates - Generation 1
      run: |
        python -m src.progressive_quality_gates_enhanced --generation 1 --verbose

    - name: Upload Generation 1 Results
      uses: actions/upload-artifact@v3
      with:
        name: quality-gates-gen1-report
        path: enhanced_quality_gates_report.json

  # Generation 2: MAKE IT ROBUST
  quality-gates-generation-2:
    runs-on: ubuntu-latest
    needs: quality-gates-generation-1
    name: Quality Gates - Generation 2 (MAKE IT ROBUST)
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Security Hardening Tests
      run: |
        python -c "from security_hardening_enhanced import save_security_report; save_security_report()"

    - name: Run Error Handling Tests
      run: |
        python -c "from robust_error_handling_enhanced import save_error_report; save_error_report()"

    - name: Run Progressive Quality Gates - Generation 2
      run: |
        python -m src.progressive_quality_gates_enhanced --generation 2 --verbose

    - name: Upload Generation 2 Results
      uses: actions/upload-artifact@v3
      with:
        name: quality-gates-gen2-report
        path: enhanced_quality_gates_report.json

  # Generation 3: MAKE IT SCALE
  quality-gates-generation-3:
    runs-on: ubuntu-latest
    needs: quality-gates-generation-2
    name: Quality Gates - Generation 3 (MAKE IT SCALE)
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Performance Scaling Tests
      run: |
        python src/performance_scaling_engine.py

    - name: Run Progressive Quality Gates - Generation 3
      run: |
        python -m src.progressive_quality_gates_enhanced --generation 3 --verbose

    - name: Upload Generation 3 Results
      uses: actions/upload-artifact@v3
      with:
        name: quality-gates-gen3-report
        path: enhanced_quality_gates_report.json

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-gates-generation-3
    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit Security Scanner
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety Vulnerability Scanner
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Build and Push Container
  build-and-push:
    runs-on: ubuntu-latest
    needs: [quality-gates-generation-3, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-east-1 --name fair-credit-scorer-cluster

    - name: Deploy to Kubernetes
      run: |
        # Apply Kubernetes manifests with progressive rollout
        kubectl apply -f k8s/
        kubectl rollout status deployment/fair-credit-scorer-bias-mitigation -n production --timeout=600s

    - name: Run Post-Deployment Health Checks
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/fair-credit-scorer-bias-mitigation -n production

        # Run health checks
        kubectl get pods -n production
        kubectl get svc -n production

        # Test application endpoint
        sleep 30
        curl -f http://api.fair-credit-scorer-bias-mitigation.com/health || exit 1

    - name: Notify Deployment Success
      run: |
        echo "üöÄ Production deployment successful!"
        echo "‚úÖ All Progressive Quality Gates passed"
        echo "üåç Multi-region deployment active"
        echo "üìä Performance monitoring enabled"