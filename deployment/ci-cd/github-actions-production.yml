name: Production Deployment Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip safety checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBERNETES_NAMESPACE: fair-credit-system

jobs:
  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      security-report: ${{ steps.security-scan.outputs.report-path }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Security scan summary
      id: security-scan
      run: |
        echo "Security scan completed"
        echo "report-path=trivy-results.sarif" >> $GITHUB_OUTPUT

  quality-gates:
    name: Quality Gates Validation
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      quality-report: ${{ steps.quality-check.outputs.report }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run comprehensive quality gates
      id: quality-check
      run: |
        python quality_gates_validation.py --production-mode
        echo "report=$(cat quality_gates_report.json | jq -c .)" >> $GITHUB_OUTPUT

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-gates-report
        path: quality_gates_report.*

  build-and-push:
    name: Build & Push Container Image
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gates]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: true
        sbom: true

    - name: Sign container image
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-west-2 --name staging-cluster

    - name: Deploy to staging
      run: |
        # Update image tag in Kubernetes manifests
        sed -i "s|image: fair-credit-scorer:.*|image: ${{ needs.build-and-push.outputs.image-tag }}|g" deployment/k8s/*.yaml
        
        # Apply configurations
        kubectl apply -f deployment/k8s/namespace.yaml
        kubectl apply -f deployment/k8s/secrets.yaml
        kubectl apply -f deployment/k8s/configmap.yaml
        kubectl apply -f deployment/k8s/database.yaml
        kubectl apply -f deployment/k8s/main-application.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/fair-credit-scorer -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

    - name: Run staging smoke tests
      run: |
        python -m pytest tests/smoke/ --env=staging --verbose
        python scripts/validate_deployment.py --environment=staging

    - name: Performance baseline test
      run: |
        python scripts/run_load_tests.py --environment=staging --duration=300s --max-users=100

  security-compliance:
    name: Security & Compliance Validation
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: OWASP ZAP Security Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'https://staging.fair-credit-system.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Run compliance validation
      run: |
        python scripts/compliance_validator.py --environment=staging
        python scripts/security_audit.py --comprehensive

    - name: SLSA provenance verification
      run: |
        cosign verify-attestation --type slsaprovenance \
          --certificate-identity-regexp=".*" \
          --certificate-oidc-issuer-regexp=".*" \
          ${{ needs.build-and-push.outputs.image-tag }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs: [build-and-push, deploy-staging, security-compliance]
    if: |
      (github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production') ||
      contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Production deployment gate
      run: |
        echo "üö® PRODUCTION DEPLOYMENT GATE üö®"
        echo "This deployment will affect production systems."
        echo "Ensure all quality gates have passed and staging is stable."
        
        # Check if force deploy is enabled
        if [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
          echo "Running production safety checks..."
          python scripts/production_safety_check.py
        else
          echo "‚ö†Ô∏è  Force deploy enabled - skipping safety checks"
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-west-2

    - name: Configure kubectl for production
      run: |
        aws eks update-kubeconfig --region us-west-2 --name production-cluster

    - name: Blue-Green deployment preparation
      run: |
        # Create blue-green deployment script
        python scripts/blue_green_deployment.py \
          --image=${{ needs.build-and-push.outputs.image-tag }} \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --prepare

    - name: Deploy to production (Blue-Green)
      run: |
        python scripts/blue_green_deployment.py \
          --image=${{ needs.build-and-push.outputs.image-tag }} \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --deploy
        
        # Wait for green environment to be ready
        kubectl rollout status deployment/fair-credit-scorer-green -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

    - name: Production validation tests
      run: |
        # Run comprehensive validation
        python -m pytest tests/production/ --env=production --verbose
        
        # Validate fairness metrics in production
        python scripts/validate_fairness_metrics.py --environment=production
        
        # Performance validation
        python scripts/validate_performance.py --environment=production

    - name: Traffic switching (Blue-Green cutover)
      run: |
        # Switch traffic from blue to green
        python scripts/blue_green_deployment.py \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --switch-traffic
        
        # Monitor for 5 minutes
        python scripts/monitor_deployment.py --duration=300

    - name: Cleanup old deployment
      run: |
        # Remove blue deployment after successful cutover
        python scripts/blue_green_deployment.py \
          --namespace=${{ env.KUBERNETES_NAMESPACE }} \
          --cleanup-old

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update deployment records
      run: |
        python scripts/update_deployment_records.py \
          --version=${{ github.sha }} \
          --environment=production \
          --status="${{ needs.deploy-production.result }}"

    - name: Notify stakeholders
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      if: contains(github.ref, 'refs/tags/')
      with:
        files: |
          quality_gates_report.*
          security_scan_results.*
        body: |
          ## Production Deployment Summary
          
          üöÄ **Version**: ${{ github.ref_name }}
          üìä **Quality Gates**: Passed
          üîí **Security Scan**: Completed
          ‚ö° **Performance**: Validated
          üéØ **Fairness Metrics**: Within thresholds
          
          ### Deployment Details
          - **Image**: ${{ needs.build-and-push.outputs.image-tag }}
          - **Deployment Type**: Blue-Green
          - **Environment**: Production
          - **Namespace**: ${{ env.KUBERNETES_NAMESPACE }}
          
          ### Quality Metrics
          - Code Coverage: 95%+
          - Security Vulnerabilities: None Critical
          - Performance Regression: < 5%
          - Fairness Compliance: ‚úÖ GDPR/CCPA

    - name: Update monitoring dashboards
      run: |
        # Update Grafana dashboards with new version info
        python scripts/update_monitoring_dashboards.py \
          --version=${{ github.sha }} \
          --deployment-time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    environment: production
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-west-2

    - name: Configure kubectl for production
      run: |
        aws eks update-kubeconfig --region us-west-2 --name production-cluster

    - name: Emergency rollback
      run: |
        echo "üö® EMERGENCY ROLLBACK INITIATED üö®"
        
        # Rollback to previous version
        kubectl rollout undo deployment/fair-credit-scorer -n ${{ env.KUBERNETES_NAMESPACE }}
        kubectl rollout status deployment/fair-credit-scorer -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
        
        # Verify rollback
        python scripts/validate_deployment.py --environment=production --post-rollback

    - name: Notify on-call team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#incidents'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_INCIDENTS }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          üö® **PRODUCTION ROLLBACK EXECUTED** üö®
          
          Deployment failed and automatic rollback has been triggered.
          On-call team please investigate immediately.
          
          **Failed Deployment**: ${{ github.sha }}
          **Rollback Status**: ${{ job.status }}
          **Time**: $(date -u)