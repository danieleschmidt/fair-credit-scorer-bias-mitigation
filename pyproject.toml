[build-system]
requires = ["setuptools>=61", "wheel", "setuptools-scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "fair_credit_scorer_bias_mitigation"
version = "0.2.0"
requires-python = ">=3.8"
dependencies = [
    "scikit-learn==1.7.0",
    "pandas==2.3.1",
    "numpy==2.3.1",
    "matplotlib==3.10.3",
    "fairlearn==0.12.0",
    "networkx==3.5",
    "PyYAML>=6.0",
    "requests>=2.28.0",
]

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["fair_credit_scorer_bias_mitigation"]
py-modules = [
    "architecture_review",
    "baseline_model",
    "bias_mitigator",
    "config",
    "data_loader_preprocessor",
    "evaluate_fairness",
    "fairness_metrics",
    "run_tests",
    "repo_hygiene_bot",
    "repo_hygiene_cli",
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "pytest-xdist==3.5.0",
    "pytest-mock==3.14.1",
    "mutmut==2.4.4",
    "pact-python==2.2.1",
    "pytest-html==4.1.1",
    "locust==2.31.8",
    "faker==30.3.0",
    "pylint==3.3.1",
    "ruff==0.12.7",
    "black==24.3.0",
    "bandit==1.8.6",
    "mypy==1.17.1",
    "pre-commit==3.6.0",
    "tox==4.28.4",
]
test = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "pytest-xdist==3.5.0",
    "pytest-mock==3.14.1",
]
lint = [
    "ruff==0.12.7",
    "black==24.3.0",
    "bandit==1.8.6",
    "mypy==1.17.1",
]
docs = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.6.16",
    "mkdocs-gen-files==0.5.0",
    "mkdocstrings[python]==0.24.0",
]

[project.scripts]
fairness-eval = "fair_credit_scorer_bias_mitigation.cli:main"
repo-hygiene-bot = "repo_hygiene_cli:main"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: integration tests",
    "unit: unit tests",
    "performance: performance benchmarks",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # asserts allowed in tests

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
