name: Automated Maintenance

on:
  schedule:
    # Daily at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
    # Monthly on the 1st at 4 AM UTC
    - cron: '0 4 1 * *'
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - security
          - cleanup
          - metrics

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

jobs:
  dependency-updates:
    name: Check Dependencies
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.maintenance_type == 'dependencies' || github.event.inputs.maintenance_type == 'all'
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
      
      - name: Check for dependency updates
        run: |
          pip list --outdated --format=json > outdated-packages.json
          
          # Create issue if critical updates available
          CRITICAL_UPDATES=$(jq '[.[] | select(.latest_version != .version)] | length' outdated-packages.json)
          
          if [ "$CRITICAL_UPDATES" -gt 5 ]; then
            echo "::notice::Found $CRITICAL_UPDATES outdated packages"
            echo "NEEDS_UPDATE=true" >> $GITHUB_ENV
          fi
      
      - name: Create dependency update issue
        if: env.NEEDS_UPDATE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated-packages.json', 'utf8'));
            
            const body = `
            ## Dependency Update Report
            
            Found ${outdated.length} outdated packages that may need updates:
            
            | Package | Current | Latest | Type |
            |---------|---------|--------|------|
            ${outdated.map(pkg => 
              `| ${pkg.name} | ${pkg.version} | ${pkg.latest_version} | ${pkg.latest_filetype} |`
            ).join('\n')}
            
            Please review and update as appropriate.
            
            **Auto-generated by maintenance workflow**
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ”„ Dependency Updates Available - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['dependencies', 'maintenance', 'auto-generated']
            });

  security-scan:
    name: Security Maintenance
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 3 * * 0' || github.event.inputs.maintenance_type == 'security' || github.event.inputs.maintenance_type == 'all'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          pip install -e .
      
      - name: Run comprehensive security scan
        run: |
          # Safety check
          safety check --json --output safety-maintenance.json || true
          
          # Bandit scan
          bandit -r src -f json -o bandit-maintenance.json || true
          
          # Semgrep scan
          semgrep --config=auto --json --output=semgrep-maintenance.json src/ || true
      
      - name: Analyze security results
        run: |
          # Count vulnerabilities
          SAFETY_ISSUES=$(jq '[.[] | select(.vulnerability_id)] | length' safety-maintenance.json 2>/dev/null || echo 0)
          BANDIT_ISSUES=$(jq '.results | length' bandit-maintenance.json 2>/dev/null || echo 0)
          SEMGREP_ISSUES=$(jq '.results | length' semgrep-maintenance.json 2>/dev/null || echo 0)
          
          TOTAL_ISSUES=$((SAFETY_ISSUES + BANDIT_ISSUES + SEMGREP_ISSUES))
          
          echo "SAFETY_ISSUES=$SAFETY_ISSUES" >> $GITHUB_ENV
          echo "BANDIT_ISSUES=$BANDIT_ISSUES" >> $GITHUB_ENV
          echo "SEMGREP_ISSUES=$SEMGREP_ISSUES" >> $GITHUB_ENV
          echo "TOTAL_ISSUES=$TOTAL_ISSUES" >> $GITHUB_ENV
      
      - name: Create security report issue
        if: env.TOTAL_ISSUES > 0
        uses: actions/github-script@v7
        with:
          script: |
            const body = `
            ## ðŸ”’ Security Maintenance Report
            
            **Summary:**
            - Safety (dependency vulnerabilities): ${process.env.SAFETY_ISSUES} issues
            - Bandit (code security): ${process.env.BANDIT_ISSUES} issues  
            - Semgrep (SAST): ${process.env.SEMGREP_ISSUES} issues
            - **Total: ${process.env.TOTAL_ISSUES} security issues**
            
            **Next Steps:**
            1. Review the security scan artifacts
            2. Prioritize critical and high severity issues
            3. Create specific issues for each vulnerability
            4. Update dependencies and fix code issues
            
            **Scan Date:** ${new Date().toISOString()}
            
            **Auto-generated by security maintenance workflow**
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Security Issues Found - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['security', 'maintenance', 'auto-generated', 'high-priority']
            });
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-maintenance-reports
          path: |
            safety-maintenance.json
            bandit-maintenance.json
            semgrep-maintenance.json

  repository-cleanup:
    name: Repository Cleanup
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 4 1 * *' || github.event.inputs.maintenance_type == 'cleanup' || github.event.inputs.maintenance_type == 'all'
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Clean up old branches
        run: |
          # Delete merged branches (except main/develop)
          git remote prune origin
          
          # Find branches that have been merged
          MERGED_BRANCHES=$(git branch -r --merged origin/main | grep -v 'origin/main' | grep -v 'origin/develop' | sed 's/origin\///' || echo "")
          
          if [ -n "$MERGED_BRANCHES" ]; then
            echo "Found merged branches to clean up:"
            echo "$MERGED_BRANCHES"
            echo "CLEANUP_NEEDED=true" >> $GITHUB_ENV
            echo "MERGED_BRANCHES<<EOF" >> $GITHUB_ENV
            echo "$MERGED_BRANCHES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
      
      - name: Check for stale issues
        uses: actions/github-script@v7
        with:
          script: |
            const sixMonthsAgo = new Date();
            sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'asc',
              per_page: 100
            });
            
            const staleIssues = issues.filter(issue => 
              new Date(issue.updated_at) < sixMonthsAgo && 
              !issue.labels.some(label => label.name === 'pinned')
            );
            
            if (staleIssues.length > 0) {
              core.exportVariable('STALE_ISSUES_COUNT', staleIssues.length);
              
              // Add stale label to old issues
              for (const issue of staleIssues.slice(0, 10)) { // Limit to 10 per run
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['stale']
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `This issue has been marked as stale because it hasn't been updated in 6 months. Please provide an update or it may be closed in 30 days.`
                });
              }
            }
      
      - name: Create cleanup report
        if: env.CLEANUP_NEEDED == 'true' || env.STALE_ISSUES_COUNT > 0
        uses: actions/github-script@v7
        with:
          script: |
            const mergedBranches = process.env.MERGED_BRANCHES || '';
            const staleIssues = process.env.STALE_ISSUES_COUNT || 0;
            
            const body = `
            ## ðŸ§¹ Repository Cleanup Report
            
            **Merged Branches to Clean Up:** ${mergedBranches.split('\n').filter(b => b.trim()).length}
            ${mergedBranches ? `\`\`\`\n${mergedBranches}\n\`\`\`` : ''}
            
            **Stale Issues:** ${staleIssues} issues marked as stale
            
            **Recommended Actions:**
            - Review and delete merged branches
            - Follow up on stale issues
            - Consider archiving inactive discussions
            
            **Auto-generated by cleanup maintenance workflow**
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ§¹ Repository Cleanup Report - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['maintenance', 'cleanup', 'auto-generated']
            });

  metrics-collection:
    name: Collect Repository Metrics
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.maintenance_type == 'metrics' || github.event.inputs.maintenance_type == 'all'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Collect repository metrics
        uses: actions/github-script@v7
        with:
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 1
            });
            
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 1
            });
            
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            
            const metrics = {
              timestamp: new Date().toISOString(),
              repository: {
                stars: repo.stargazers_count,
                forks: repo.forks_count,
                watchers: repo.watchers_count,
                open_issues: repo.open_issues_count,
                size_kb: repo.size
              },
              activity: {
                total_issues: issues.length,
                total_prs: prs.length,
                total_releases: releases.length,
                last_release: releases[0]?.tag_name || 'none',
                last_release_date: releases[0]?.published_at || null
              }
            };
            
            const fs = require('fs');
            fs.writeFileSync('.github/project-metrics.json', JSON.stringify(metrics, null, 2));
            
            core.summary
              .addHeading('ðŸ“Š Repository Metrics')
              .addTable([
                ['Metric', 'Value'],
                ['Stars', repo.stargazers_count.toString()],
                ['Forks', repo.forks_count.toString()],
                ['Open Issues', repo.open_issues_count.toString()],
                ['Total Releases', releases.length.toString()],
                ['Latest Release', releases[0]?.tag_name || 'None']
              ])
              .write();
      
      - name: Commit metrics
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/project-metrics.json
          git diff --staged --quiet || git commit -m "chore: update project metrics [skip ci]"
          git push