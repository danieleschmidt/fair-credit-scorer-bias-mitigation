# Comprehensive Security Scanning Workflow
# Implements advanced security analysis including:
# - CodeQL semantic analysis
# - Dependency vulnerability scanning
# - Container security (if applicable)
# - SBOM generation and signing
# - Supply chain security validation

name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily security scan at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1

jobs:
  # CodeQL semantic security analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      security-events: write
      contents: read
      actions: read
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        config-file: ./.github/codeql-config.yml
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies for analysis
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install safety pip-audit
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-results.json
        pip-audit --format=sarif --output=pip-audit-results.sarif
      continue-on-error: true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-results.json
        safety check  # Also show in terminal
      continue-on-error: true
    
    - name: Upload pip-audit SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: pip-audit-results.sarif
        category: dependency-vulnerabilities
    
    - name: Upload vulnerability scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          pip-audit-results.json
          safety-results.json

  # Trivy filesystem vulnerability scanner
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-fs-scan'
    
    - name: Run Trivy for human-readable output
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'trivy-results.txt'
    
    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: trivy-scan-results
        path: trivy-results.txt

  # Bandit static security analysis
  bandit-scan:
    name: Bandit Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    - name: Run Bandit scan
      run: |
        bandit -r src/ -f json -o bandit-results.json
        bandit -r src/ -f txt -o bandit-results.txt
        bandit -r src/  # Show results in terminal
      continue-on-error: true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: |
          bandit-results.json
          bandit-results.txt

  # SBOM generation and signing
  sbom:
    name: Generate and Sign SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Generate SBOM with syft
      uses: anchore/sbom-action@v0
      with:
        path: ./
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Generate SBOM with cyclone-dx
      run: |
        pip install cyclonedx-bom
        cyclonedx-py -o sbom.cyclonedx.json
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.0'
    
    - name: Sign SBOM with Cosign
      run: |
        cosign sign-blob --bundle sbom.spdx.json.bundle sbom.spdx.json
        cosign sign-blob --bundle sbom.cyclonedx.json.bundle sbom.cyclonedx.json
      env:
        COSIGN_EXPERIMENTAL: 1
    
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sbom-artifacts
        path: |
          sbom.spdx.json
          sbom.cyclonedx.json
          sbom.spdx.json.bundle
          sbom.cyclonedx.json.bundle

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pip-licenses licensecheck
    
    - name: Check licenses with pip-licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        pip-licenses
    
    - name: Run license compatibility check
      run: |
        licensecheck --zero
      continue-on-error: true
    
    - name: Upload license results
      uses: actions/upload-artifact@v3
      with:
        name: license-results
        path: |
          licenses.json
          licenses.md

  # Supply chain security analysis
  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Check package signatures
      run: |
        pip install in-toto
        python scripts/verify_supply_chain.py
      continue-on-error: true
    
    - name: Analyze dependency tree
      run: |
        pip install pipdeptree
        pipdeptree --json-tree > dependency-tree.json
        pipdeptree --graph-output png > dependency-graph.png
    
    - name: Upload supply chain analysis
      uses: actions/upload-artifact@v3
      with:
        name: supply-chain-analysis
        path: |
          dependency-tree.json
          dependency-graph.png

  # Security summary and reporting
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, trivy-scan, bandit-scan, license-check]
    if: always()
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Date: $(date -u)" >> security-summary.md
        echo "Commit: ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results Status" >> security-summary.md
        echo "- CodeQL: ${{ needs.codeql.result }}" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Trivy Scan: ${{ needs.trivy-scan.result }}" >> security-summary.md
        echo "- Bandit Scan: ${{ needs.bandit-scan.result }}" >> security-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Add artifact summaries if they exist
        if [ -f dependency-scan-results/pip-audit-results.json ]; then
          echo "## Dependency Vulnerabilities" >> security-summary.md
          python -c "
import json
with open('dependency-scan-results/pip-audit-results.json') as f:
    data = json.load(f)
    vulns = data.get('vulnerabilities', [])
    if vulns:
        print(f'Found {len(vulns)} dependency vulnerabilities')
        for v in vulns[:5]:  # Show top 5
            print(f'- {v.get(\"package\", \"unknown\")}: {v.get(\"id\", \"N/A\")}')
    else:
        print('No dependency vulnerabilities found')
" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "Generated by GitHub Actions Security Workflow" >> security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
    
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${summary}`
          });

  # Critical security failure notification
  security-alert:
    name: Security Alert
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, trivy-scan]
    if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
    
    steps:
    - name: Send security alert
      run: |
        echo "🚨 SECURITY ALERT: Critical security scan failures detected!"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        
        # In a real implementation, this would send notifications to:
        # - Slack security channel
        # - Email to security team
        # - Create high-priority issue
        # - Trigger incident response workflow