# Comprehensive CI/CD Pipeline for Advanced Python ML Repository
# This template provides production-ready continuous integration with:
# - Multi-version Python testing
# - Comprehensive quality gates
# - Performance monitoring
# - Security scanning integration

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  
  schedule:
    # Weekly build on Monday at 2 AM UTC
    - cron: '0 2 * * 1'

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  # Fast feedback job for quick validation
  quick-check:
    name: Quick validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
          pyproject.toml
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[lint]
    
    - name: Run fast syntax check
      run: |
        python -m py_compile src/**/*.py
        ruff check --select E9,F63,F7,F82 .

  # Comprehensive testing across Python versions
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: quick-check
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
          pyproject.toml
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term \
          --cov-fail-under=85 \
          --junit-xml=pytest-results.xml \
          --maxfail=10 \
          -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: true

  # Code quality and security analysis
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: quick-check
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
          pyproject.toml
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[lint,dev]
    
    - name: Run ruff linting
      run: |
        ruff check . --output-format=github
    
    - name: Run ruff formatting check
      run: |
        ruff format --check .
    
    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-results.json
        bandit -r src/  # Also show results in terminal
    
    - name: Run mypy type checking
      run: |
        mypy src/ --junit-xml=mypy-results.xml
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: |
          bandit-results.json
          mypy-results.xml

  # Performance benchmarking
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          -v
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json
    
    - name: Performance regression check
      run: |
        python scripts/benchmark_runner.py --check-regression

  # Integration and end-to-end testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 25
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ \
          --junit-xml=integration-results.xml \
          -v
    
    - name: Run end-to-end tests
      run: |
        python -m pytest tests/e2e/ \
          --junit-xml=e2e-results.xml \
          -v
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-results
        path: |
          integration-results.xml
          e2e-results.xml

  # Contract testing for API compatibility
  contract:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Run contract tests
      run: |
        python -m pytest tests/contract/ \
          --junit-xml=contract-results.xml \
          -v
    
    - name: Upload contract test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: contract-results
        path: contract-results.xml

  # Build validation
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, quality]
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # Mutation testing (only on main branch due to time cost)
  mutation:
    name: Mutation Testing
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 45
    if: github.ref == 'refs/heads/main' && github.event_name != 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]
    
    - name: Run mutation tests
      run: |
        python -m mutmut run --paths-to-mutate src/ --runner "python -m pytest -x"
        python -m mutmut results > mutation-results.txt
    
    - name: Upload mutation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mutation-results
        path: mutation-results.txt

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, quality, integration, contract, build]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Test status: ${{ needs.test.result }}"
        echo "Quality status: ${{ needs.quality.result }}"
        echo "Integration status: ${{ needs.integration.result }}"
        echo "Contract status: ${{ needs.contract.result }}"
        echo "Build status: ${{ needs.build.result }}"
        
        if [[ "${{ needs.test.result }}" != "success" || \
              "${{ needs.quality.result }}" != "success" || \
              "${{ needs.integration.result }}" != "success" || \
              "${{ needs.contract.result }}" != "success" || \
              "${{ needs.build.result }}" != "success" ]]; then
          echo "One or more required jobs failed"
          exit 1
        fi
        
        echo "All required jobs passed successfully!"